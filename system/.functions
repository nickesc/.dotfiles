
#        ████                            ██   ██
#       ░██░                            ░██  ░░
#      ██████ ██   ██ ███████   █████  ██████ ██  ██████  ███████   ██████
#     ░░░██░ ░██  ░██░░██░░░██ ██░░░██░░░██░ ░██ ██░░░░██░░██░░░██ ██░░░░
#       ░██  ░██  ░██ ░██  ░██░██  ░░   ░██  ░██░██   ░██ ░██  ░██░░█████
#   ██  ░██  ░██  ░██ ░██  ░██░██   ██  ░██  ░██░██   ░██ ░██  ░██ ░░░░░██
#  ░██  ░██  ░░██████ ███  ░██░░█████   ░░██ ░██░░██████  ███  ░██ ██████
#  ░░   ░░    ░░░░░░ ░░░   ░░  ░░░░░     ░░  ░░  ░░░░░░  ░░░   ░░ ░░░░░░
    

## Terminal Utilities
    # Get named var (usage: get "VAR_NAME")
get() {
  echo "${!1}"
}
    # Add to path
prepend-path() {
  [ -d $1 ] && PATH="$1:$PATH"
}
    # clear the local Workspace test dir
cleartest() {
    touch ~/Workspace/.test/TempClearTestDoc
    rm -rf ~/Workspace/.test/{*,.*}
}
    # copyfile <file> : Copies the contents of a given file to the system or X Windows clipboard
function copyfile {
  emulate -L zsh
  clipcopy $1
}
    # Bash Function To Extract File Archives Of Various Types
extract () {
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xjf $1     ;;
             *.tar.gz)    tar xzf $1     ;;
             *.bz2)       bunzip2 $1     ;;
             *.rar)       rar x $1       ;;
             *.gz)        gunzip $1      ;;
             *.tar)       tar xf $1      ;;
             *.tbz2)      tar xjf $1     ;;
             *.tgz)       tar xzf $1     ;;
             *.zip)       unzip $1       ;;
             *.Z)         uncompress $1  ;;
             *.7z)        7z x $1    ;;
             *)           echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}
function f() {
  find . -name "$1" 2>&1 | grep -v 'Permission denied'
}
    # kill all detached screens
killscreens () {
    screen -ls | grep Detached | cut -d. -f1 | awk '{print $1}' | xargs kill
}
    # Change working directory to the top-most Finder window location
function cdf() {
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}
    

# Network Utilities
    # upload to transfer.sh
transfer() {
  tmpfile=$( mktemp -t transferXXX )
  curl --progress-bar --upload-file "$1" https://transfer.sh/$(basename $1) >> $tmpfile;
  cat $tmpfile;
  cat $tmpfile | pbcopy;
  rm -f $tmpfile;
}
function whois() {
  local domain=$(echo "$1" | awk -F/ '{print $3}'); # get domain from URL
  if [ -z $domain ] ; then
    domain=$1;
  fi;
  echo "Getting whois record for: $domain …";

  # avoid recursion
  # this is the best whois server
  # strip extra fluff
  /usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q';
}
# Show all names (CNs and SANs) in SSL cert for a given domain.
function getcertnames() {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified.";
    return 1;
  fi;

  local domain="${1}";
  echo "Testing ${domain}…";
  echo ""; # newline

  local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
    | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

  if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
    local certText=$(echo "${tmp}" \
      | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
      no_serial, no_sigdump, no_signame, no_validity, no_version");
    echo "Common Name:";
    echo ""; # newline
    echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
    echo ""; # newline
    echo "Subject Alternative Name(s):";
    echo ""; # newline
    echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
      | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
    return 0;
  else
    echo "ERROR: Certificate not found.";
    return 1;
  fi;
}


## Custom Functions

    # nickesc ascii graphic
logonickesc() {
    printf "\n\n            ██         ██                            \n           ░░         ░██                            \n   ███████  ██  █████ ░██  ██  █████   ██████  █████ \n  ░░██░░░██░██ ██░░░██░██ ██  ██░░░██ ██░░░░  ██░░░██\n   ░██  ░██░██░██  ░░ ░████  ░███████░░█████ ░██  ░░ \n   ░██  ░██░██░██   ██░██░██ ░██░░░░  ░░░░░██░██   ██\n   ███  ░██░██░░█████ ░██░░██░░██████ ██████ ░░█████\n  ░░░   ░░ ░░  ░░░░░  ░░  ░░  ░░░░░░ ░░░░░░   ░░░░░\n"
}





encrypt (){

    usage="\nusage:   encrypt <target> [password] [size]\n         encrypt create <name> [password] [size]\n         encrypt help\nEncrypts traget into a sparse bundle, default 5gb max-size\nFor more help see 'hdiutil help'\n\n"
    if [ $# -eq 0 ] || [ "$1" = "help" ]; then
        printf $usage
    elif [ "$1" = "create" ]; then
        if [ $# -eq 1 ]; then
            printf $usage
        elif [ $# -eq 2 ]; then
            hdiutil create -encryption -stdinpass -volname $(basename -s ".${2##*.}" "$2") -size 5g -type SPARSEBUNDLE "$2"
        elif [ $# -eq 3 ]; then
            echo -n "$3" | hdiutil create -encryption -stdinpass -volname $(basename -s ".${2##*.}" "$2") -size 5g -type SPARSEBUNDLE "$2"
        elif [ $# -ge 4 ]; then
            echo -n "$3" | hdiutil create -encryption -stdinpass -volname $(basename -s ".${2##*.}" "$2") -size "$4" -type SPARSEBUNDLE "$2"
        fi
    else
        if [ $# -eq 1 ]; then
            hdiutil create -encryption -stdinpass -format UDSB -srcfolder "$1" "$1"
        elif [ $# -eq 2 ]; then
            echo -n "$2" | hdiutil create -encryption -stdinpass -format UDSB -srcfolder "$1" "$1"
        elif [ $# -ge 3 ]; then
            echo -n "$2" | hdiutil create -encryption -stdinpass -size "$3" -format UDSB -srcfolder "$1" "$1"
        fi
    fi

}
decrypt (){

    if [ $# -eq 0 ] || [ "$1" = "help" ]; then
        printf "\n\nusage:   decrypt <target> [password]\n\n"
    elif [ $# -eq 1 ]; then
        hdiutil attach -stdinpass "$1"
        cd "/Volumes/$(basename -s ".${1##*.}" "$1")"
    elif [ $# -eq 2 ]; then
        echo -n "$2" | hdiutil attach -stdinpass "$1"
        cd "/Volumes/$(basename -s ".${1##*.}" "$1")"
    fi

}

detach (){

    if [ $# -eq 0 ] || [ "$1" = "help" ]; then
        printf "\nusage:   detach <volume>\n\n"
    else
        if hdiutil detach "/Volumes/$1"; then
            echo "Detached $1"
        else
            echo "Moving to home directory and retrying"
            cd
            if hdiutil detach "/Volumes/$1"; then
                echo "Detached $1"
            else
                echo "Failed to detach $1"
            fi
        fi
    fi

}

alias eject="detach"

export HISTDIR="$HOME/Workspace/__space__/.history"

export VENVLOG="$HISTDIR/python/.venvlog"

venvactivate() {
    venvName=$2
    venvlog="$VENVLOG"
    if [ "$1" = "init" ]; then
        verb="Initialized";
        printf "\nCreating new venv as (%s)...\n" $venvName;
    else
        verb="Started";
    fi
    deactivate 2> /dev/null
    
    venvpath=`find ~+ -type f -name "activate" -maxdepth 3`
    
    source $venvpath
    if [ $? -eq 0 ]; then
        touch $VENVLOG
        grep -qxF $venvpath $VENVLOG || echo $venvpath >> $VENVLOG
        #source $venvName/bin/activate
        pyv=$(python -V)
        version=${pyv#* }
        #pyv="Python"
        printf "%s virtual environment (%s) in Python %s -- don't forget to type 'deactivate' or 'venv end' when you're done! \n" $verb $venvName $version;
    else
        printf "%s could not be found -- do you have the right directory?\n" $venvName;
    fi
}

venvusage() {
    printf "\n venv [action] <venv>\n\nUsage:\n\nvenv help              --  use to display 'venv' usage. \n\nvenv init <venvName>   --  use to create a new venv in the current directory. If venvName is left blank, the default "venv" is used. \n\nvenv start <venvName>  --  use to activate the venv in the current directory. If venvName is left blank, the default "venv" is used. \n\nvenv end               --  used to deactivate the current venv.\n\nvenv log               --  used to open the 'venv' log file, logging all venvs created with this tool. The log is currently saved at '%s'\n\nUse 'venv2' for explicit Python 2 virtualenv and 'venv3' for explicit Python 3 venv -- 'venv' defaults to Python 3.\nUse 'sdkenv' for Java/Scala/Kotlin virtual environments\n\nFunctions wrap built-in Python 'venv' tool for Python 3 and 'virtualenv' for Python to create virtual environments, Python versions are managed by pyenv\n\n" $VENVLOG;
}



venv() {
    if [ $# -eq 0 ] || [ "$1" = "help" ]; then
        venvusage
    elif [ $# -ge 1 ]; then
        if [[ -z "${2+present}" ]]; then
            venvName="venv";
        else
            venvName=$2;
        fi;
        if [ "$1" = "init" ]; then
            python -m venv $venvName;
            touch $VENVLOG
            echo `find ~+ -type f -name "activate" -maxdepth 3` >> $VENVLOG
            venvactivate $1 $venvName ;
        elif [ "$1" = "start" ]; then
            venvactivate $1 $venvName;
        elif [ "$1" = "end" ]; then
            deactivate;
        elif [ "$1" = "log" ]; then
            touch $VENVLOG
            open $VENVLOG;
        else
            venvusage
        fi
    fi
}

venv2() {
    if [ $# -eq 0 ] || [ "$1" = "help" ]; then
        venvusage
    elif [ $# -ge 1 ]; then
        if [[ -z "${2+present}" ]]; then
            venvName="venv";
        else
            venvName=$2;
        fi;
        if [ "$1" = "init" ]; then
            virtualenv $venvName;
            touch $VENVLOG
            echo `find ~+ -type f -name "activate" -maxdepth 3` >> $VENVLOG
            venvactivate $1 $venvName ;
        elif [ "$1" = "start" ]; then
            venvactivate $1 $venvName;
        elif [ "$1" = "end" ]; then
            deactivate;
        elif [ "$1" = "log" ]; then
            touch $VENVLOG
            open $VENVLOG;
        else
            venvusage
        fi
    fi
}

venv3() {
    if [ $# -eq 0 ] || [ "$1" = "help" ]; then
        venvusage
    elif [ $# -ge 1 ]; then
        if [[ -z "${2+present}" ]]; then
            venvName="venv";
        else
            venvName=$2;
        fi;
        if [ "$1" = "init" ]; then
            python3 -m venv $venvName;
            touch $VENVLOG
            echo `find ~+ -type f -name "activate" -maxdepth 3` >> $VENVLOG
            venvactivate $1 $venvName ;
        elif [ "$1" = "start" ]; then
            venvactivate $1 $venvName;
        elif [ "$1" = "end" ]; then
            deactivate;
        elif [ "$1" = "log" ]; then
            touch $VENVLOG
            open $VENVLOG;
        else
            venvusage
        fi
    fi
}


export SDKENVLOG="$HISTDIR/sdk/.sdkenvlog"

sdkenvactivate() {
    sdkenvName=$2
    sdkenvlog="$SDKENVLOG"
    if [ "$1" = "init" ]; then
        verb="Initialized";
        printf "\nCreating new sdkenv as (%s)...\n" $sdkenvName;
    else
        verb="Started";
    fi
    sdk env clear 2> /dev/null
    
    sdkenvpath=`find ~+ -maxdepth 1 -type f -name ".sdkmanrc"`
    
    sdk env
    if [ $? -eq 0 ]; then
        touch $SDKENVLOG
        grep -qxF $sdkenvpath $SDKENVLOG || echo $sdkenvpath >> $SDKENVLOG
        vertext=$(sdk current)
        version=${vertext#* }
        distro=${version#* }
        printf "%s virtual environment (%s) %s -- don't forget to type 'sdk env clear' or 'sdkenv end' when you're done! \n\n" $verb $sdkenvName $version;
    else
        printf "%s could not be found -- do you have the right directory?\n\n" $sdkenvName;
    fi
}

sdkenvusage() {
    printf "\n sdkenv [action]\n\nUsage:\n\nsdkenv help   --  use to display 'sdkenv' usage. \n\nsdkenv init   --  use to create a new sdkenv in the current directory. \n\nsdkenv start  --  use to activate the sdkenv in the current directory.\n\nsdkenv end    --  used to clear the current sdkenv.\n\nsdkenv log    --  used to open the 'sdkenv' log file, logging all sdkenv created with this tool. The log is currently saved at '%s'\n\nUse 'venv' for Python virtual environments\n\nFunctions wrap SDKMAN!!\n\n" $SDKENVLOG;
}



sdkenv() {
    if [ $# -eq 0 ] || [ "$1" = "help" ]; then
        sdkenvusage
    elif [ $# -ge 1 ]; then
        if [[ -z "${2+present}" ]]; then
            sdkenvName="sdkenv";
        else
            sdkenvName=$2;
        fi;
        if [ "$1" = "init" ]; then
            sdk env init;
            touch $SDKENVLOG
            echo `find ~+ -maxdepth 1 -type f -name ".sdkmanrc"` >> $SDKENVLOG
            sdkenvactivate $1 $sdkenvName
        elif [ "$1" = "start" ]; then
            sdkenvactivate $1 $sdkenvName
        elif [ "$1" = "end" ]; then
            sdk env clear;
        elif [ "$1" = "log" ]; then
            touch $SDKENVLOG
            open $SDKENVLOG;
        else
            sdkenvusage
        fi
    fi
}

sdkflush(){
    sdk flush
    sdk flush broadcast
    sdk flush archives
    sdk flush tmp
}

sdkupdate(){
    sdk selfupdate
    sdk update
}

sdkupgrade(){
    sdkflush
    sdkupdate
    sdk upgrade
}

export DATA="$HOME/Workspace/Data"


postgresqlinit(){
    if [ $# -eq 0 ]; then
        printf "\nMust name the server.\nUsage:\n\n    postgresqlinit <name>\n\n"
    else
        mkdir -p $DATA/postgresql/"$1"
        mkdir -p $DATA/postgresql/logs/"$1"
        initdb $DATA/postgresql/"$1"
    
        if [ "$2" = "start" ]; then
            #touch "$HISTDIR/postgresql/logs/$1/$(date '+%Y-%m-%d %H:%M:%S').log"
            pg_ctl -D "$DATA/postgresql/$1" -l "$HISTDIR/postgresql/logs/$1/$(date '+%Y-%m-%d %H:%M:%S').log" start
        fi
    fi
}

postgresqlstart() {
    if [ $# -eq 0 ]; then
        # start the default server on no args
        pg_ctl -D /usr/local/var/postgresql@14 start
    else
        #touch "$HISTDIR/postgresql/logs/$1/$(date '+%Y-%m-%d %H:%M:%S').log"
        pg_ctl -D "$DATA/postgresql/$1" -l "$HISTDIR/postgresql/logs/$1/$(date '+%Y-%m-%d %H:%M:%S').log" start
    fi
}

postgresqlstop() {
    if [ $# -eq 0 ]; then
        # stop the default server on no args
        pg_ctl -D /usr/local/var/postgresql@14 stop
    else
        pg_ctl -D "$DATA/postgresql/$1" stop
    fi
}

dbstatus(){
    printf "\nBrew services:\n\n"
    brew services list
    printf "\n\nRunning processes for PostgreSQL, MySQL and MongoDB:\n\n"
    ps aux | grep -v grep | grep 'mongod\|postgresql\|mysql'

}



# SymLink the file, if it doesn't already exist
# 1) Identifies what directory is being worked on.
# 2) Unlinks, any existing file (if requested by option switch).
# 3) Create the new link

# symlink <target> <destination> [--force][-f]
function symlink {  
    
    usage="usage: symlink <target> <destination> [--force|-f]|[--remove|-r]"
    
    if [ "$1" = "help" ] || [ $# -eq 0 ]; then
        echo $usage
    elif [ $# -ge 2 ]; then
        echo " "
        echo "WORKING ON: $1"
        # does it exist
        f="$(basename $1)"
        g="$(readlink -f $1)"
        if [[ -e "$2/$f" ]] || [[ -h "$2/$f" ]]; then
            echo "    WARNING: $2/$f already exists"
            if [[ $* == *-f* ]]; then
                echo "    FORCING LINK OF $g TO $2"
                unlink "$2/$f"
                ln -s $g $2
            elif [[ $* == *-r* ]]; then
                echo "    UNSAFELY FORCING LINK OF $g TO $2"
                rm "$2/$f"
                ln -s $g $2
            else
                echo "    SKIPPING $g."
                echo " "
                echo "    USE symlink $1 $2 --force TO FORCE A LINK"
                echo "    USE symlink $1 $2 --remove TO UNSAFELY FORCE A LINK"
            fi
        # does not exist
        else
          # create the link
          echo "    Linking $g to $2"
          ln -s $g $2
        fi
        echo " "
    else
        echo "symlink: $@: Invalid arguments"
        echo $usage
    fi
}



