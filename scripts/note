#!/usr/bin/env zsh

#                       ██
#                      ░██
#   ███████   ██████  ██████  █████
#  ░░██░░░██ ██░░░░██░░░██░  ██░░░██
#   ░██  ░██░██   ░██  ░██  ░███████
#   ░██  ░██░██   ░██  ░██  ░██░░░░
#   ███  ░██░░██████   ░░██ ░░██████
#  ░░░   ░░  ░░░░░░     ░░   ░░░░░░
#
# note by N. Escobar (https://github.com/nickesc)
#                    (https://github.com/nickesc/.dotfiles)
#                    (https://nickesc.github.io)
#                    (https://nickesc.com)
#
#   note - create notes and notebooks as directories in your Workspace (~/Worksapce/Notes/[notebook]);
#          notebooks and note actions are automatically tracked by git on a 'notebook' branch;
#          notebooks also have a log file that tracks git and notebook actions and a .notebook file
#          that contains important informtation about the notebook including name, location, logfile
#          location, any created notes and any linked directories
#
#   Tip:   note must be executed in your current shell to automatically switch to the active note directory;
#          source the file or use '. note' if an alias is not installed
#
# Usage:                            note <name> - creates a note in the general notebook
#                        note <notebook> <name> - creates a note in a new or existing notebook
#                 note book|b <notebook> [note] - opens or creates a notebook or note
#                       note close|c <notebook> - deletes a notebook
#                        note list|l [--all|-a] - lists all notebooks; use the '--all' flag to show hidden notebooks
#       note project|p <notebook> <projectPath> - symlink a notebook to a project folder
#           note shred|p <notebook> <note_name> - symlink a notebook to a project folder\n\n
#
# Usage examples:
#
#    To open the 'note' note in the general notebook:
#       note
#
#    To open or create a note in the general notebook:
#       note <note_name>
#
#    To open or create a note in a named notebook:
#        note book <notebook> <note_name>
#          or
#        note <notebook> <note_name>
#
#    To open or create a notebook:
#        note book <notebook>
#
#    To delete a note:
#        note shred <notebook> <note_name>
#
#    To delete a notebook:
#        note close <notebook>
#
#    To create a shortcut to a notebook in a project directory:
#        note project <notebook> <destination>
#
#    To list all noteboks:
#        note list


export NOTES="$WORKSPACE/Notes"
export NOTEHIST="$HISTDIR/note"
mkdir -p "$NOTES"

function symlink {
    
    usage="usage: symlink <target> <destination> [--force|-f]|[--remove|-r]"
    
    if [ "$1" = "help" ] || [ $# -eq 0 ]; then
        echo "$usage"
    elif [ $# -ge 2 ]; then
        echo " "
        echo "WORKING ON: $1"
        # does it exist
        f="$(basename "$1")"
        g="$(readlink -f "$1")"
        if [[ -e "$2/$f" ]] || [[ -h "$2/$f" ]]; then
            echo "    WARNING: $2/$f already exists"
            if [[ $* == *-f* ]]; then
                echo "    FORCING LINK OF $g TO $2"
                unlink "$2/$f"
                ln -s "$g" "$2"
            elif [[ $* == *-r* ]]; then
                echo "    UNSAFELY FORCING LINK OF $g TO $2"
                rm "$2/$f"
                ln -s "$g" "$2"
            else
                echo "    SKIPPING $g."
                echo " "
                echo "    USE symlink $1 $2 --force TO FORCE A LINK"
                echo "    USE symlink $1 $2 --remove TO UNSAFELY FORCE A LINK"
            fi
        # does not exist
        else
          # create the link
          echo "    Linking $g to $2"
          ln -s "$g" "$2"
        fi
        echo " "
    else
        echo "symlink: Invalid arguments"
        echo "$usage"
    fi
}

notehelp(){
    printf "\n    Tip: note must be executed in your current shell to automatically switch to the active note directory;"
    printf "\n         source the file or use '. note' if an alias is not installed"
    printf "\n\n    note - create notes and notebooks as directories in your Workspace (%s/[notebook])\n" "$NOTES"
    printf "\n  Usage:                       note <note_name> - creates a note in the general notebook"
    printf "\n                    note <notebook> <note_name> - creates a note in a new or existing notebook"
    printf "\n             note book|b <notebook> [note_name] - opens or creates a notebook or note"
    printf "\n                        note close|c <notebook> - deletes a notebook"
    printf "\n                         note list|l [--all|-a] - lists all notebooks; '--all' flag shows hidden notebooks"
    printf "\n        note project|p <notebook> <projectPath> - symlink a notebook to a project folder"
    printf "\n            note shred|p <notebook> <note_name> - symlink a notebook to a project folder\n\n"
}

notebookinfo(){
    printf "\nNotebook: $1\nNotes:\n"
    \ls -Ft --color=auto
    printf "\n"
}

newnotebook(){
    notebook="$1"
    num=2
    
    if [ "$notebook" = "book" ] || [ "$notebook" = "b" ] || [ "$notebook" = "close" ] || [ "$notebook" = "c" ] || [ "$notebook" = "help" ] || [ "$notebook" = "h" ] || [ "$notebook" = "project" ] || [ "$notebook" = "p" ] || [ "$notebook" = "shred" ] || [ "$notebook" = "s" ]; then
        echo "note: $notebook: Unable to create notebook with the name '$notebook' - is it a note command (help, book, close, list, etc.)?"
        return 1
    fi
    
    listAfter=0
    if [ -d "$NOTES/$notebook" ] && [ "$2" != "note" ]; then
        listAfter=1
    fi
    
    mkdir -p "$NOTES/$notebook"
    mkdir -p "$NOTEHIST"
    touch "$NOTEHIST/$notebook.log"
    echo "Created the $notebook notebook" >> "$NOTEHIST/$notebook.log"
    cd "$NOTES/$notebook"
    git init --initial-branch=notebook >> "$NOTEHIST"/"$notebook".log 2>&1
    if ! [ -f "$NOTES/$notebook/.notebook" ]; then
        touch "$NOTES/$notebook/.notebook"
        echo "name=$notebook" >> "$NOTES/$notebook/.notebook"
        echo "notedir=$NOTES/$notebook" >> "$NOTES/$notebook/.notebook"
        echo "notehist=$NOTEHIST/$notebook.log" >> "$NOTES/$notebook/.notebook"
    fi
    
    
    if [ $listAfter = 1 ]; then
        notebookinfo $notebook
    fi
}


# newnote notebook name
newnote(){

    notebook=$1
    name=$2
    
    newnotebook "$notebook" "note"
    
    if [ $? = 1 ]; then
        return 1
    else
        note="$name.md"
        touch "$NOTES/$notebook/$note"
        $EDITOR "$NOTES/$notebook/$note"
        grep -qxF "note=$note" "$NOTES/$notebook/.notebook" || echo "note=$note" >> "$NOTES/$notebook/.notebook"
        git add -Av >> "$NOTEHIST"/"$notebook".log 2>&1 && git commit -m "$note" >> "$NOTEHIST"/"$notebook".log 2>&1
        notebookinfo $notebook
    fi
    
}

# if ask for help
if [ "$1" = "help" ] || [ "$1" = "h" ]; then
    notehelp
    
# if ask for list of notebooks ('note list')
elif [ "$1" = "list" ] || [ "$1" = "l" ]; then
    temp=$(pwd)
    cd "$NOTES"
    printf "\nNotebooks:\n"
    
    if [ "$2" = "-a" ] || [ "$2" = "--all" ]; then
        \ls --color=auto -dA */ .*/
    else
        \ls --color=auto -d */
    fi
    
    printf "\n"
    cd "$temp"

# if ask for new note with specified name and notebook ('note book test example')
elif [ "$1" = "book" ] || [ "$1" = "b" ] && [ $# -ge 3 ]; then
    newnote "$2" "$3"

# if ask for new notebook ('note book test')
elif [ "$1" = "book" ] || [ "$1" = "b" ] && [ $# -ge 2 ]; then
    newnotebook "$2"

# if ask for symlink notebook to project ('note project notebook target')
elif [ "$1" = "project" ] || [ "$1" = "p" ]; then
    target="$NOTES/$2"
    destination="$3"
    if [ $# -ge  3 ]; then
        symlink "$target" "$destination"
        touch "$target"/.notebook
        \grep -qxF "link=$destination" "$target"/.notebook || echo "link=$destination" >> "$target"/.notebook
        
        echo "\nLinked $target to $destination\n" >> "$NOTEHIST"/"$2".log 2>&1
    else
        echo "note: project: Unable to link notebook '$2' with project '$3' - were the correct arguments provided?"
        echo "    usage:  note project [notebook] [projectPath]"
        echo "\nFailed to link $target to $destination\n" >> "$NOTEHIST"/"$2".log 2>&1
        return 1
    fi
    
# if ask for shred note ('note shred notebook note')
elif [ "$1" = "shred" ] || [ "$1" = "s" ] && [ $# -ge 3 ]; then
    if [ -f "$NOTES/$2/$3.md" ]; then
        yn="n"
        read -k "yn?Shred the $3 note in the $2 notebook? (y|n [default]): "
        printf "\n"
        if [ "$yn" = "y" ] || [ "$yn" = "Y" ]; then
            printf "\nShredding:\n"
            rm -v "$NOTES/$2/$3.md"
            sed "/note=$3/d" "$NOTES/$2/.notebook" > "$NOTES/$2/.notbook"
            mv "$NOTES/$2/.notbook" "$NOTES/$2/.notebook"
            printf "\nShredded the $3 note in the $2 notebook.\n"
            echo "\nShredded the $3 note in the $2 notebook.\n" >> "$NOTEHIST"/"$notebook".log 2>&1
        else
            echo "Aborted shredding the $3 note"
            return 1
        fi
    else
        echo "note: $2/$3: '$2/$3' does not match any notes - is the name right?"
        return 1
    fi

# if ask for close notebook ('note close test')
elif [ "$1" = "close" ] || [ "$1" = "c" ] && [ $# -ge 2 ]; then
    if [ -d "$NOTES/$2" ]; then
        yn="n"
        read -k "yn?Close the $2 notebook? (y|n [default]): "
        printf "\n"
        if [ "$yn" = "y" ] || [ "$yn" = "Y" ]; then
            currloc=$(echo "$(pwd)" | tr '[:upper:]' '[:lower:]')
            noteloc=$(echo "$NOTES/$2" | tr '[:upper:]' '[:lower:]')
            if [ "$currloc" = "$noteloc" ]; then
                cd "$NOTES"
            fi
            rm -rf "$NOTES/$2/.git"
            printf "\nShredding:\n"
            rm -rv "$NOTES/$2"
            printf "\nClosed the $2 notebook.\n"
            echo "\nClosed the $2 notebook.\n" >> "$NOTEHIST"/"$notebook".log 2>&1
        else
            echo "Aborted closing the $2 notebook"
            return 1
        fi
    else
        echo "note: $2: '$2' does not match any notebooks - is the name right?"
        return 1
    fi
    
# if ask for new note with no specified name ('note')
elif [ "$1" = "zle_bracketed_paste" ] || [ $# -eq 0 ]; then
    newnote "General" "note"

# if ask for new note with specified name and notebook ('note test example')
elif [ $# -ge 2 ]; then
    newnote "$1" "$2"

# if ask for new note with specified name ('note exampleNote')
elif [ $# = 1 ] && [ "$1" != "zle_bracketed_paste" ]; then
    newnote "General" "$1"

else
    notehelp
fi

